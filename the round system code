-- [[
    game can only run when there more then 2 players
    so you will need one more persone 
]]

local PerkManager = {}

local players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local PerkData = DataStoreService:GetDataStore("PlayerPerks")

--[[  
    Save player perks to the DataStore  
    This function safely saves the player's currently equipped perks.
]]
local function savePlayerPerks(player)
    local data = {
        Perk1 = player:FindFirstChild("parck1") and player.parck1.Value,
        Perk2 = player:FindFirstChild("parck2") and player.parck2.Value
    }
    local success, err = pcall(function()
        PerkData:SetAsync(player.UserId, data)
    end)
    if not success then
        warn("Failed to save perks for " .. player.Name .. ": " .. tostring(err))
    end
end

--[[  
    Load player perks from the DataStore  
    Attempts to load saved perks and equip them.
]]
local function loadPlayerPerks(player)
    local success, data = pcall(function()
        return PerkData:GetAsync(player.UserId)
    end)

    if success and data then
        PerkManager.equiptPerk(player, 1, data.Perk1 or "")
        PerkManager.equiptPerk(player, 2, data.Perk2 or "")
    else
        if not success then
            warn("Failed to load perks for " .. player.Name)
        end
    end
end

--[[  
    Determine if the pressed button is E or Q  
    Returns true if E, false if Q or any other.
]]
local function whatButtonUsed(button)
    return button == Enum.KeyCode.E
end

--[[  
    Add cooldown NumberValues to player  
    Used to track cooldown state per perk slot.
]]
local function addPerkTimerToPlayer(player)
    -- Cooldown for perk slot 1 (E)
    local cdPerk1 = Instance.new("NumberValue")
    cdPerk1.Name = "cdPerk1"
    cdPerk1.Value = 0
    cdPerk1.Parent = player

    -- Cooldown for perk slot 2 (Q)
    local cdPerk2 = Instance.new("NumberValue")
    cdPerk2.Name = "cdPerk2"
    cdPerk2.Value = 0
    cdPerk2.Parent = player
end

--[[  
    Wait for PlayerGui instance to exist before attempting GUI updates  
    Useful to avoid errors if UI not loaded yet.
]]
local function waitForGui(player)
    local gui
    repeat
        gui = player:FindFirstChild("PlayerGui")
        task.wait()
    until gui
    return gui
end

--[[  
    Update cooldown timer text on the player’s UI for both perks  
    Shows remaining cooldown or perk name if no cooldown.
]]
local function setCooldownForPlayerGui(player, timerE, timerQ, perkName)
    local gui = waitForGui(player)
    local perkGui = gui:FindFirstChild("perks")
    if not perkGui then
        warn("Perks GUI not found for player " .. player.Name)
        return
    end

    local frame = perkGui:FindFirstChild("Frame")
    if not frame then
        warn("Frame not found inside perks GUI for player " .. player.Name)
        return
    end

    local perkSlot1 = frame:FindFirstChild("perk1")
    local perkSlot2 = frame:FindFirstChild("perk2")

    -- Update text for perk slot 1 cooldown or name
    if perkSlot1 and perkSlot1:FindFirstChild("TextLabel") then
        perkSlot1.TextLabel.Text = timerE > 0 and tostring(timerE) or perkName
    else
        warn("perk1 TextLabel missing for player " .. player.Name)
    end

    -- Update text for perk slot 2 cooldown or name
    if perkSlot2 and perkSlot2:FindFirstChild("TextLabel") then
        perkSlot2.TextLabel.Text = timerQ > 0 and tostring(timerQ) or perkName
    else
        warn("perk2 TextLabel missing for player " .. player.Name)
    end
end

--[[  
    Equip a perk to the player’s perk slot and save the change  
    perkNumber: 1 for E, 2 for Q slot  
    perkName: string name of the perk to equip
]]
function PerkManager.equiptPerk(player, perkNumber, perkName)
    local perkSlotOne = player:FindFirstChild("parck1")
    local perkSlotTwo = player:FindFirstChild("parck2")

    if perkNumber == 1 and perkSlotOne then
        perkSlotOne.Value = perkName
    elseif perkNumber == 2 and perkSlotTwo then
        perkSlotTwo.Value = perkName
    else
        warn("Perk slot missing for player:", player.Name)
    end

    savePlayerPerks(player)
end

--[[  
    Run the cooldown timer asynchronously and update GUI every second  
    player: Player object  
    PerkTime: number of seconds cooldown lasts  
    timer: NumberValue tracking cooldown  
    perkName: name of the perk for UI display
]]
local function runTimer(player, PerkTime, timer, perkName)
    for i = PerkTime, 0, -1 do
        timer.Value = i
        local timerE = player:FindFirstChild("cdPerk1") and player.cdPerk1.Value or 0
        local timerQ = player:FindFirstChild("cdPerk2") and player.cdPerk2.Value or 0
        setCooldownForPlayerGui(player, timerE, timerQ, perkName)
        task.wait(1)
    end
end

--[[  
    Start cooldown timer for a perk and update GUI immediately  
    player: Player object  
    perk: perk data table with 'cd' and 'name' fields  
    button: Enum.KeyCode (E or Q)
]]
local function setTimer(player, perk, button)
    local Perktime = perk.cd
    local perkName = perk.name or "Perk"

    local timerName = whatButtonUsed(button) and "cdPerk1" or "cdPerk2"
    local timer = player:FindFirstChild(timerName)
    if not timer then
        warn("Cooldown timer not found for player " .. player.Name .. " slot " .. timerName)
        return
    end

    timer.Value = Perktime

    -- Update GUI to show cooldown start immediately
    local timerE = player:FindFirstChild("cdPerk1") and player.cdPerk1.Value or 0
    local timerQ = player:FindFirstChild("cdPerk2") and player.cdPerk2.Value or 0
    setCooldownForPlayerGui(player, timerE, timerQ, perkName)

    -- Run cooldown asynchronously without blocking main thread
    task.spawn(function()
        runTimer(player, Perktime, timer, perkName)
    end)
end

--[[  
    Check if cooldown is finished and perk can be used again  
    Returns true if cooldown is zero.
]]
local function ifCooldownForPlayerIsOver(player, button)
    local timerName = whatButtonUsed(button) and "cdPerk1" or "cdPerk2"
    local timer = player:FindFirstChild(timerName)
    return timer and timer.Value == 0
end

--[[  
    Retrieves the trigger function and data for a perk from ReplicatedStorage  
    Returns trigger function and the full perk data table.
]]
local function getPerkTrigger(perkName, button)
    local perkFolderName = whatButtonUsed(button) and "buttonE" or "buttonQ"
    local moduleFolder = game.ReplicatedStorage:FindFirstChild("module")
    if not moduleFolder then
        warn("Module folder missing in ReplicatedStorage")
        return
    end

    local perksFolder = moduleFolder:FindFirstChild("perks")
    if not perksFolder then
        warn("Perks folder missing inside module")
        return
    end

    local folder = perksFolder:FindFirstChild(perkFolderName)
    if not folder then
        warn("Folder " .. perkFolderName .. " missing inside perks")
        return
    end

    local perkModule = folder:FindFirstChild(perkName)
    if not perkModule then
        warn("Perk module " .. perkName .. " missing inside " .. perkFolderName)
        return
    end

    local perkData = require(perkModule)
    return perkData.Trigger, perkData
end

--[[  
    Called when a player uses their perk button (E or Q)  
    Executes the perk’s trigger function if cooldown is over.
]]
function PerkManager.ButtonTrigger(player, button)
    local perkSlotName = whatButtonUsed(button) and "parck1" or "parck2"
    local perkSlot = player:FindFirstChild(perkSlotName)
    if not perkSlot then
        warn("Perk slot not found:", perkSlotName)
        return
    end

    local perkName = perkSlot.Value
    if not perkName or perkName == "" then
        warn("No perk equipped for button:", tostring(button))
        return
    end

    local trigger, perkData = getPerkTrigger(perkName, button)
    if not trigger then
        warn("No trigger function found for perk:", perkName)
        return
    end

    if not ifCooldownForPlayerIsOver(player, button) then
        warn("Perk is still on cooldown for:", player.Name)
        return
    end

    -- Call the perk’s trigger function
    trigger(player)

    -- Start cooldown timer after perk use
    setTimer(player, perkData, button)
end

--[[  
    Reset both perk cooldown timers for a player  
    Useful on game state resets or powerups.
]]
function PerkManager.resetCooldowns(player)
    local cd1 = player:FindFirstChild("cdPerk1")
    local cd2 = player:FindFirstChild("cdPerk2")

    if cd1 then cd1.Value = 0 end
    if cd2 then cd2.Value = 0 end

    warn(player.Name .. "'s cooldowns reset")
end

--[[  
    Utility: Clear all perks from player slots  
    Resets equipped perks to empty strings.
]]
function PerkManager.clearPerks(player)
    local perkSlotOne = player:FindFirstChild("parck1")
    local perkSlotTwo = player:FindFirstChild("parck2")

    if perkSlotOne then
        perkSlotOne.Value = ""
    end
    if perkSlotTwo then
        perkSlotTwo.Value = ""
    end
    savePlayerPerks(player)
end

--[[  
    Utility: Print current equipped perks to console for debugging  
]]
function PerkManager.printEquippedPerks(player)
    local perk1 = player:FindFirstChild("parck1") and player.parck1.Value or "None"
    local perk2 = player:FindFirstChild("parck2") and player.parck2.Value or "None"
    print(player.Name .. " equipped perks:")
    print("  Slot 1 (E): " .. perk1)
    print("  Slot 2 (Q): " .. perk2)
end

-- Connect player events
players.PlayerAdded:Connect(function(player)
    addPerkTimerToPlayer(player)
    loadPlayerPerks(player)
end)

players.PlayerRemoving:Connect(savePlayerPerks)

return PerkManager
