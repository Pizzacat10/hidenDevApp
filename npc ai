fix a bug with the chase that all -- by me not ai
and add animtion to the mimic -- by me not ai
local rs = game:GetService("ReplicatedStorage")

local players = game:GetService("Players")

local char = script.Parent
local humanoid = char:FindFirstChild('Humanoid')
local hrp = char:FindFirstChild("HumanoidRootPart")
hrp:SetNetworkOwner(nil)

local animtion = char:FindFirstChild("animtion")

local idle = animtion:FindFirstChild("idle")
local idleLoad = humanoid:LoadAnimation(idle)

local walk = animtion:FindFirstChild("walk")
local walkLoad = humanoid:LoadAnimation(walk)

local sound = rs:FindFirstChild("sound")
local fnaf2Mask = sound:FindFirstChild("Mask Fnaf 2 ")

local pathfindingService = game:GetService("PathfindingService")

local chase = false

local wayPointPath = { -- it is all the wayPoint in the map that the mimic can walk around
	[1] = workspace:FindFirstChild("pointOne").Position,
	[2] = workspace:FindFirstChild("pointTwo").Position,
	[3] = workspace:FindFirstChild("pointThree").Position,
	[4] = workspace:FindFirstChild("pointFore").Position,
	[5] = workspace:FindFirstChild("pointFive").Position,
	[6] = workspace:FindFirstChild("pointsixe").Position,
	[7] = workspace:FindFirstChild("pointseven").Position,
	[8] = workspace:FindFirstChild("pointegth").Position,
	[9] = workspace:FindFirstChild("pointnine").Position,
	[10] = workspace:FindFirstChild("pointten").Position,
	[11] = workspace:FindFirstChild("pointelven").Position,
	[12] = workspace:FindFirstChild("pointtwlve").Position,
	[13] = workspace:FindFirstChild("pointthreeteen").Position,
	[14] = workspace:FindFirstChild("pointforetin").Position,
}


-- chace function is used to get the mimic to chace smothly with no waiting for it to get to the point
-- and it will also make the mimic to walk to the point that the player is at
local function chace(point)
	
	local path = pathfindingService:CreatePath({ -- is a table that is used in creating the path for the mimic
		AgentRadius = 2,
		AgentHeight = 3,
		AgentCanJump = false,
	})

	local success, errorMessage = pcall(function() -- check if the mimic can get to the point
		path:ComputeAsync(hrp.Position,point)
	end)

	-- Confirm the computation was successful
	-- if yes it will run trow all the waypoints
	if success and path.Status == Enum.PathStatus.Success then
		-- For each waypoint, create a part to visualize the path
		for _, waypoint in path:GetWaypoints() do
			local part = Instance.new("Part") -- creating the part make it Transparency 1
			part.Position = waypoint.Position
			part.Size = Vector3.new(0.5, 0.5, 0.5)
			part.Color = Color3.new(1, 0, 1)
			part.Transparency = 1
			part.Anchored = true
			part.CanCollide = false
			part.Parent = game.Workspace
			
			chase = true -- trun on chase mode
			humanoid:MoveTo(waypoint.Position) -- move to the waypoint
			part:Destroy() -- destroying the part and making
			
			-- it will keep destroing one part and remaking a new path for it to run smothly after the player
		end

	else -- chacking if there now errors
		print(`Path unable to be computed, error: {errorMessage}`)
		return 
	end

	chase = false -- deible off chase mode

end

-- this is used to check if the player is in the ray of the mimic
-- it is using raycast to see if the mimic got a line of sit to the player
-- and if yes it will start going after them
local function canSeePlayer(target)

	local rayOrigin = hrp.Position -- that is the start position of the ray
	local direction = target:FindFirstChild("HumanoidRootPart").Position -- that is the end position of the ray
	
	local range = 10 -- how fare can the mimic see
	
	local rayDirection = ( direction - rayOrigin).Unit * range -- calc the direction of the ray
	
	-- this is used to get the raycast result and the Instance what let us know if it's a player
	local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

	if raycastResult then -- if the ray hit somthing it will see what it is
		print("Instance:", raycastResult.Instance.Name)
		
		if raycastResult.Instance:IsDescendantOf(target) then -- it is check if it is a part of the player/target
			chace(target:FindFirstChild("HumanoidRootPart").Position) -- that start up the chase
			walkLoad:Play() -- it play the walk animtion
			return true
		end
		
		
	end
	
	return false
	
end

-- remove the accesorys if there is any
local function removeAccesorys()
	for _,v in pairs(char:GetChildren()) do
		if v:IsA("Accessory") then
			v:Destroy()
		end
	end
	
	fnaf2Mask:Play()
	
end

-- put the accesorys on the mimic
local function putAccesory(accsosrys)
	
	local putAccesory = math.random(1,10) -- role a number so it will have a chance to not apear
	
	if putAccesory == 1 then -- if the number is 1 then it will put the accesory on the mimic
		print("lost")
		return
	end
	
	removeAccesorys() -- reomve the accsory to not over lap them
	-- it checks for the accesorys folder in the replicated storage
	if not accsosrys:IsA("Folder") then return end
	-- get all the accsorys in the folder
	local accsosrysChildern = accsosrys:GetChildren()
	
	if accsosrysChildern == 0 then -- if they got any accesory
		print("no accsosrys found")
		return
	end
	
	local random = math.random(1,#accsosrysChildern) -- role the index accesory
	
	print(random)
	
	local randomid = accsosrysChildern[random] -- get the accesory with the index
	
	local acc = randomid:Clone() -- clone the accesory and put at in char
	acc.Parent = char 
		
end

-- change the mimic face
local function changeFace(faces)
	
	-- check if it a folder
	if not faces:IsA("Folder") then return end
	
	-- check to see if the mimic have his head
	local MimicHead = char:FindFirstChild("Head")
	if not MimicHead then return end
	
	-- check if the mimic got a decal on his head(his face)
	local face = MimicHead:FindFirstChild("Decal")
	if not face then return end
	
	-- get all of the face childern
	local facesChildern = faces:GetChildren()

	if facesChildern == 0 then -- check if the folder have childern
		print("no accsosrys found")
		return
	end

	local random = math.random(1,#facesChildern) -- pick random index for a faces
	
	print(random)
	
	local randomFaceId = facesChildern[random] -- get the index face
	
	face.Texture = randomFaceId.Texture -- put the text of the index face on mimic face
	
end

-- let the mimic chagne is a pirans and look deffrent
-- can help him supris the player
local function changeSuit()
	
	-- check for the mimic cloths that he can change in too
	local cloths = rs:FindFirstChild("cloths")
	if not cloths then return end
	
	-- check for the mimic faces that he can use
	local faces = cloths:FindFirstChild("faces")
	if not faces then return end
	
	-- check for the accsosrys that the mimic can use
	local accsosrys = cloths:FindFirstChild("accsory")
	if not accsosrys then return end
	
	changeFace(faces) -- use the funchtion to chagne his face
	putAccesory(accsosrys) -- use the funtion to chaget his accsorys
	
end

-- moveFunction is use to move the mimic with less code
-- it is like the chase but it is waitng bettwin each move
-- and it loooking for the player as in chase mode it is already know where you are
local function moveFunction(finishPosition)
	
	local path = pathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = false,
	})
	
	local success, errorMessage = pcall(function()
		path:ComputeAsync(hrp.Position, finishPosition)
	end)
	
	-- Confirm the computation was successful
	if success and path.Status == Enum.PathStatus.Success then
		-- For each waypoint, create a part to visualize the path
		for _, waypoint in path:GetWaypoints() do
			local part = Instance.new("Part")
			part.Position = waypoint.Position
			part.Size = Vector3.new(0.5, 0.5, 0.5)
			part.Color = Color3.new(1, 0, 1)
			part.Transparency = 1
			part.Anchored = true
			part.CanCollide = false
			part.Parent = game.Workspace
			
			humanoid:MoveTo(waypoint.Position)
			
			for _, player in pairs(players:GetChildren()) do -- run at all the players in the game
				if player.Character then -- check if they got character
					-- if yes it will check if the mimic can see them
					if canSeePlayer(player.Character) then
						-- if it see them then it will start going after them
						-- and will destroy the wayPoint that they where going to
						canSeePlayer(player.Character)
						part:Destroy()
						break -- break the loop to not spawn the next wayPoint
					end
					
				end
			end
			
			humanoid.MoveToFinished:Wait() -- it is waiting for the mimic to get to the wayPoint that he going to
			part:Destroy() -- after he gets here it is destroying the lest part
			
		end
		
	else
		print(`Path unable to be computed, error: {errorMessage}`)
	end
	
end

-- it is a function that pick a random point and tell the mimic to go there
local function walkPoint()
	
	local randomPoint = math.random(1,#wayPointPath) -- pick a radom wayPoint out of them all
	walkLoad:Play()
	moveFunction(wayPointPath[randomPoint]) -- using the fuction to make the mimic to mover there
	
end

-- that is the mainFrame of m2( mimic 2 )
-- that is the mianFrame that one that tell what funtion to work when
local function mainFrameM2()
	while true do -- it is start with a loop that is never ending for the mimic to all was work
		
		while not chase do -- make a loop that will play while the mimic is not in chase mode

			-- pick one out of 3 "events" 
			-- there are 2 blank for that to add less chance of an event to happen
			local randomChanceOfEvent = math.round(1,4) 
			print(randomChanceOfEvent)

			walkPoint() -- it is going to a random point in the map
			task.delay(math.random(5,10),function() -- it is delaying the event by 5-10s 
				if randomChanceOfEvent == 1 then -- if the randomChanceOfEvent is 1 then it will make him change suit 
					changeSuit()

				elseif randomChanceOfEvent == 2 then -- if the randomChanceOfEvent is 2 then it will make him remove accesorys
					removeAccesorys()

				elseif randomChanceOfEvent == 3 then -- and same with this one
					removeAccesorys()

				end
			end)
			idleLoad:Play()
			walkLoad:Stop()
			wait(0.5) -- and it wait for 0.5 seconds to start again
			idleLoad:Stop()
		end

	end
end

mainFrameM2() -- that is the funtion to call it all and start the system
